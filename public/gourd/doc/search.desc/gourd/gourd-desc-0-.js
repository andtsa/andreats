searchState.loadedDescShard("gourd", 0, "<code>gourd</code>\nAnalysing runs - collecting metrics, exporting, plotting.\nAn implementation for allocating queued jobs to chunks\nThe command line interface and relevant structures.\nExtensions to the <code>Experiment</code> struct defined in <code>gourd-lib</code>, …\nFunctionality for user-friendly initialisation of new …\nA framework for running experiments on the local machine …\nThe main CLI entry-point of the <code>gourd</code> utility.\nFunctionality for post-processing jobs including …\nRerun subcommand helper functions\nA framework for running supercomputer experiments by …\nFunctionality for checking and displaying the status of …\nAn interface for communicating with <code>gourd-wrapper</code>, a …\nA column that can be appended to the end of a <code>Table</code>.\nCreate a <code>Column</code> from a list of entries of type <code>X</code>.\nRepresent a human-readable table. Universal between CSV …\nAppend a column to the table.\nThe table entries (vector of rows, each row is a vector of …\nThe row cells of this column\nA function to convert a type <code>X</code> element into the content of …\nGet the width (in utf-8 characters) of the longest entry …\nNumber of columns in the table.\nExport experiment data as CSV file\nAn optional footer, can be used to aggregate statistics, …\nThe footer cell of this column. Defaults to empty string.\nA footer cell that can hold info aggregated from all the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a column from a vector of entries.\nGet completion time of a run.\nGet completion times of jobs.\nCSV-style table header.\nThe text header of the column. Defaults to empty string\nThe text header of the column. Defaults to empty string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDraw up plots of experiment data\nWrite this table to a <code>Writer</code>\nWrite this table to a file at the given path.\nShorthand for creating a <code>ColumnGenerator</code> with a str header …\nSame as <code>create_column</code>, but with a footer closure.\nGet a <code>ColumnGenerator</code> for every possible column of …\nGenerate a <code>Table</code> of metrics for this experiment. TODO: …\nShorthand to create a column generator for a metric that …\nGenerate a vector of <code>Table</code>s from an experiment and its …\nPlot width, size, and data to plot.\nGet data for plotting and generate plots.\nGet wall clock data for cactus plot.\nPlot the results of runs in a cactus plot.\nDescribes one chunk: a Slurm array of scheduled runs with …\nSplit an <code>Experiment</code>’s <code>Run</code>s into <code>Chunk</code>s of common …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the slurm id of the chunk if it is scheduled.\nOnce a chunk has been scheduled, mark all of its runs as …\nNext available <code>Chunk</code>s for scheduling,\nAdd the runs to the experiment so the wrapper can find …\nThe resource limits of this chunk.\nThe runs that belong to this chunk (by RunID)\nGet the still pending runs of this experiment.\nGet the still pending runs of this experiment.\nCLI Definition.\nLogging definitions.\nUtil &amp; printing functions.\nMain processing module.\nThe afterscript output content.\nOutput metrics of completed runs.\nArguments supplied with the <code>analyse</code> command.\nEnum for subcommands of the <code>run</code> subcommand.\nThe arguments that were passed to the program.\nCancel runs.\nStructure of cancel subcommand.\nStructure of the main command (gourd).\nSchedule another batch of slurm jobs.\nArguments supplied with the <code>continue</code> command.\nEnum for the columns that can be included in the CSV.\nConstruct a CSV by specifying desired columns and any …\nThe run process exit code\nThe input file that was used.\nThe metrics saved file for the run\nEnum for root-level <code>gourd</code> commands.\nGroup together runs that have the same input group.\nThe group that the run was in.\nChoice of grouping together runs based on equality …\nIntegral unshared data size\nBlock input operations\nSet up a template of an experiment configuration.\nArguments supplied with the <code>init</code> command.\nGroup together runs that have the same input.\nIntegral unshared stack size\nIntegral shared memory size\nThe afterscript that was run.\nCreate and run an experiment on this computer.\nPage faults (hard page faults)\nMaximum resident set size\nPage reclaims (soft page faults)\nIPC messages received\nIPC messages sent\nInvoluntary context switches\nSignals received\nSwaps\nVoluntary context switches\nBlock output operations\nGenerate a cactus plot for the runs of this experiment.\nEnum for the output format of the analysis.\nOutput a PNG cactus plot.\nGroup together runs that have the same program.\nThe name of the program that was run.\nRerun some of the runs from existing experiments\nArguments for the Rerun command.\nCreate an experiment from configuration and run it.\nArguments supplied with the <code>run</code> command.\nEnum for subcommands of the <code>run</code> subcommand.\nCreate and run an experiment using Slurm.\nThe slurm completion status of the run.\nDisplay the status of an experiment that was run.\nArguments supplied with the <code>status</code> command.\nOutput an SVG cactus plot.\nProcess system time\nGenerate tables for the metrics of the runs in this …\nProcess user time\nPrint information about the version.\nProcess wall time\nDisplay full afterscript output for a run. Use with -i &lt;…\nCancel all the experiments from this account (not only …\nThe main command issued.\nThe path to the config file.\nThe directory in which to initialise a new experimental …\nDry run, run but don’t actually affect anything.\nThe name of an example experiment in gourd-tutorial(7).\nThe id of the experiment to rerun jobs for [default: …\nThe id of the experiment for which to fetch status […\nThe id of the experiment for which to fetch status […\nThe id of the experiment of which to cancel runs [default: …\nThe id of the experiment to analyse [default: newest …\nget the file extension for this plot type\nDo not exit until all jobs are finished.\nChoose which columns to include in the table.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDo not shorten output even if there is a lot of runs.\nInitialise a git repository for the setup.\nGroup together the averages based on a number of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList the available example options.\nIf you want to save to a specific file\nIf you want to save to a specific file\nGet a detailed description of a run by providing its id.\nThe ids of the runs to rerun [default: all failed runs]\nCancel specific runs by providing their run ids, for …\nDisable interactive mode, for use in scripts.\nThe run mode of this run.\nPlot analysis or create a table for the run metrics.\nVerbose mode, prints debug info. For even more try: -vv.\nWhat file format to make the cactus plot in. Options are …\nIf you want to save to a specific file\nForce running more experiments than recommended.\nForce running the experiments in sequence rather than …\nDefines the logging tokens for <code>colog</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUtil function: formatting a table for printing\nGenerates the progress bar used by the cli.\nUtil function for getting the style for the CLI\nPretty print gourd’s version\nAsk the user for input to update an instance of …\nAsk the user a yes/no question\nThis function parses command that gourd was run with.\nCLAP has parsed the command, now we process it.\nPrepare the log levels for the application.\nExtension trait for the shared <code>Experiment</code> struct.\nSearch through the run dependency graph to create the …\nProvided a folder gets the specified experiment.\nInitialize a new experiment from a <code>config</code>.\nProvided a folder gets the most recent experiment.\nGet the filename of the newest experiment.\nGenerating new runs\nWe have just entered node <code>.0</code> with parents of <code>.1</code>.\nWe have just left node <code>.0</code>.\nA helper enum for dfs.\nA depth first search for creating the program tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis function will generate a new run.\nTarballs of built-in example templates (optional feature)\nVerifies that a directory is valid for the <code>gourd init</code> …\nInitializes an experimental setup.\nRetrieves and unpacks the example denoted by the provided …\nInteractive configuration of an experiment setup template.\nLists valid example IDs for this build of <code>gourd init</code>.\nStores a template for <code>gourd init</code>: a named set of directory …\nThe template description.\nA tar-gz encoded version of the directory structure of the …\nReturns the argument unchanged.\nRetrieves a named example experiment, or None.\nRetrieves all available examples.\nCalls <code>U::from(self)</code>.\nThe template name.\nExtracts the template’s tarball in the provided …\nCorrectly handles when the user cancels the operation …\nInitializes an experimental setup using interactive …\nWrite all files during initialization.\nRun an experiment locally, as specified in the config file.\nThe (first iteration) thread pool implementation.\nRun a list of tasks locally in a multithreaded way.\nFunctionality for running afterscripts.\nFunctionality for assigning labels.\nFor a run that:\nRun all the afterscripts that haven’t been run yet for …\nAssigns a label to a run.\nFailed because the assigned label has rerun_by_default set …\nFailed with an exit code\nFinished successfully, with exit code 0\nFinished successfully, and the assigned label has …\nRun has not finished yet\nThe status of a single run\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRetrieve runs to rerun\nUser interactions for SLURM reruns. This is interactive …\nHandle run status for rerun\nFind and update the resource limits for the program of a …\nGet the list of runs to rerun from the rerun options.\nGet the list of runs that have finished and ask the user …\nGet the list of runs that have failed and are re_runnable.\nCheck the statuses of a list of runs and ask the user what …\nCheck the status of a single run and ask the user what to …\nQuery the user for the resource limits of the programs for …\nAsk the user if they want to change any resource limits …\nCheck the status of a single run and return the status.\nThe interface for interacting with a SLURM cluster. This …\nCancel all of the jobs in the <code>batch_ids</code> vector\nSome checks when running on slurm to improve error handling\nGet accounting data of user’s jobs\nCheck if the provided partition is valid.\nGet the supported versions of SLURM for this interactor.\nCheck the version of slurm on the current environment. …\nThe core slurm functionality\nCurrently used implementation of interacting with SLURM …\nCheck if a version of SLURM is supported by this …\nGet the MaxArraySize of this slurm cluster\nGet the MaxJobs of this slurm cluster\nGet the MaxSubmit of this slurm cluster\nSchedule a new job array on the cluster.\nGet the number of currently scheduled or running jobs by …\nGet vector of all (not finished) jobs scheduled by user\nCheck the config that it has the necessary fields\nFunctionality associated with running on slurm\nCheck if the provided partition is valid.\nCheck if the SLURM version is supported.\nReturns the argument unchanged.\nThe way of interaction with slurm. (May be cli or library …\nCalls <code>U::from(self)</code>.\nHelper function to create string with optional args for …\nRun an experiment on delftblue.\nAn implementation of the SlurmInteractor trait for …\nCreates a Slurm duration string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet a limit from the <code>sacctmgr</code> command.\nGet a limit from the <code>scontrol</code> command.\nSupported versions by this instance of the CLI interactor\nJob terminated due to launch failure, typically due to a …\nJob was explicitly cancelled by the user or system …\nThe job completed.\nJob terminated on deadline.\nInstead of storing a possibly outdated status somewhere, …\nThis type maps between <code>run_id</code> and the Status of the run.\nStructure of file based status\nThis possible status of a job, reported by the file system.\nJob terminated due to failure of one or more allocated …\nJob experienced out of memory error.\nThe job has not yet started.\nThe job has not yet started.\nJob terminated due to preemption.\nThe job is still running.\nThe job is still running.\nStructure of slurm based status\nUnspecified by the account reason to fail\nThe reasons for slurm to kill a job\nThe status of a single run. Contains <code>FileSystemBasedStatus</code>,\nA struct that can attest the statuses or some or all …\nThe job completed successfully.\nJob has an allocation, but execution has been suspended …\nJob reached the time limit\nIf the afterscript completed successfully, this will …\nPrint status until all tasks are finished.\nPrinting information about scheduled chunks.\nState of completion of the run\nState of completion of the run\nExit code of the program\nExit code of the slurm\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFile system based status information.\nStatus retrieved from the filesystem.\nTry to get the statuses of jobs.\nCheck if we know this job to have failed.\nCheck if this state means that the run has succeded.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if this state means that the run is completed.\nCheck if this state means that the run is completed.\nCheck if we know this job to be completed based on the …\nCheck if this job is still pending\nCheck if we know this job to be scheduled.\nA function that merges status providers outputs.\nPrinting status information.\nSlurm based status information.\nThe stdout and stderr output of the slurm job.\nSlurm file based status information.\nStatus retrieved from slurm.\nGet an up-to-date <code>ExperimentStatus</code>.\nPrint user readable infomation about the scheduling status.\nProvide job status information based on the files system …\nReturns the argument unchanged.\nGet the completion of an afterscript.\nCalls <code>U::from(self)</code>.\nDisplay the status of an experiment in a human-readable …\nDisplay runs of some group.\nDisplay the status of an experiment in a human readable …\nFor an input, decide how it’s shown to a user.\nDisplay a shortened status for a small amount of runs.\nDisplay a shortened status for a lot of runs.\nStructure of Sacct output.\nProvide job status information based on the files system …\nThis function takes SacctOutput and expands job ids.\nTakes a job id as slurm spews out, eg <code>1234_[56-58]</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the job\nName of the job\nExit code of the program\nExit code of slurm\nCurrent state of the job\nFile status generated by slurm\nProvide job status information based on the slurm output …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe stderr output of the slurm job\nThe stdout output of the slurm job\nBinary verification for macos.\nThis function returns the commands to be run for an n x m …\nMapping of the expected architecture to the string used by …\nVerifies that the file present at <code>binary</code> matches the CPU …")