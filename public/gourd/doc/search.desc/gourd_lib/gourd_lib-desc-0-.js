searchState.loadedDescShard("gourd_lib", 0, "The architecture of our codebase, shared between wrapper …\nThis is a shorthand for the anyhow::bail macro, now with …\nA struct and related methods for global configuration, …\nConstant values.\nThis is a shorthand for returning the context of a error.\nThe error handling for <code>gourd</code>.\nThe setup of an experiment.\nCommon file operations\nCode shared between the wrapper and <code>gourd</code>.\nInteractions with the network for fetching resources.\nResource fetching helpers.\nA config struct used throughout the <code>gourd</code> application.\nFetch a remote resource\nAn algorithm fetched from a git repository.\nTOML struct that can be used to provide inputs.\nA label that can be assigned to a job based on the …\nOptions for configuring the execution of <code>gourd run local</code>\nA parameter.\nA wrapper around regex_lite::Regex to allow serde.\nA subparameter.\nA pair of a path to an input and additional cli arguments.\nA pair of a path to a binary and cli arguments.\nThe path to the afterscript, if there is one.\nThe cli arguments for the executable.\nThe additional cli arguments for the executable.\nA path to the executable.\nThe command to build the algorithm.\nThe commit id to fetch from the git repository.\nThe path to a folder where the experiments will be stored.\nFetch a remote resource and save it to a file.\nFetch the program binary remotely\nFetch the input file remotely\nFetching for resources.\nDirect path to the input.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoad a <code>Config</code> struct instance from a TOML file at the …\nA git reference to the program.\nThe URI to the git repository.\nA glob of input files\nMark this input as belonging to a specific group of inputs.\nA path to a TOML file that contains input combinations.\n0 or more <code>[[input]]</code> instances\nThe list of inputs for each of them.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow custom labels to be assigned based on the …\nOptions for configuring the execution of <code>gourd run local</code>\nDeserializer for the maps.\nThe path to a folder where the metrics output will be …\nThe programs to postprocess this one.\nThe number of threads to use for parallel execution of …\nThe path to a folder where the experiment output will be …\nDeserializer for the paramters (grid search).\nThe list of parameters.\nParse the additional inputs toml file and add them to the …\nThe path to the binary relative to the repository.\nThe priority of the label. Higher numbers mean higher …\nThe list of tested algorithms.\nThe regex to run over the afterscript output. If there’s …\nWhether using rerun failed will rerun this job- ie is this …\nResource limits to optionally overwrite default resource …\nIf running on a SLURM cluster, the initial global resource …\nSlurm configuration.\nIf running on a SLURM cluster, the job configurations.\nThe file in which to store this resource\nSub-parameters of this parameter.\nThe url from which to fetch this resource\nThe values of parameter.\nThe values of sub parameter.\nThe command to execute to get to the wrapper.\nFetch a program from a git repository.\nThis will take a path and canonicalize it.\nTakes the set of all inputs and expands the globbed …\nTakes the set of all inputs and all Parameters and expands …\nCheck if the parameters are well-formed.\nThe resource limits, a Slurm configuration parameter that …\nThe structure for providing custom slurm arguments\nThe config options when running through Slurm\nAccount to charge for this job\nCustom slurm arguments\nOverride the maximum number of jobs to schedule in a Slurm …\nDelay the run of new jobs\nCPUs to use per job\nThe name of the experiment. This is used (parametrically) …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nOption to set notifications for user by email when a …\nUser to be notified by the email (When not specified it’…\nThe maximum number of arrays to schedule at once.\nMemory in MB to allocate per CPU per job\nName of the sbatch argument\nWhere slurm should put the stdout and stderr of the job.\nWhich node partition to use. On DelftBlue, the options are:\nMaximum time allowed <em>for each</em> job.\nValue of the sbatch argument\nThe default path to the afterscript.\nStyle of commands in doc messages\nStyle of commands in help messages\nThe default arguments for an input.\nThe styling for error messages.\nThe prefix which will cause an argument to be interpreted …\nThe version name for Gourd! Ensure it matches:\nThe styling for help messages.\nThe internal representation of globbed inputs.\nThe internal representation of paramtrized inputs.\nInternal representation for names parsed from config\nThe internal representation of inputs generated from a …\nThe default value of warning on label overlaps.\nThe logo of the application.\nPossible values for Mail Type in slurm configuration\nThe styling for the university name.\nGrayed paragraphs of not very important text\nThe prefix which will cause an argument to be interpreted …\nStyle of <code>std::path::Path</code>s and <code>PathBuf</code>s\nThe size of the analysis output plots, in pixels.\nThe default postprocess job name.\nThe styling for the program name.\nThe default value of resource limits for a program.\nDo we assume by default that runs with custom labels are …\nMaximal number of individual prompts that the user can be …\nThe length of the bar for scheduling.\nThe styling for the secondary text.\nThe maximal amount of runs before status only shows a …\nSupported SLURM versions.\nThe amount between refreshes of the status screen, in ms.\nThe prefix which will cause an argument to be interpreted …\nThe maximal amount of tasks that gourd will schedule.\nThe styling for the tertiary text.\nThe max (bytes, lines) of afterscript output that will be …\nThe styling for warning messages.\nThe default path to the wrapper, that is, we assume …\nCreate a style with a defined foreground color.\nThe error context structure, provides an explanation and …\nThis is a shorthand for returning the context of a error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn enum to distinguish the run context.\nDescribes one experiment.\nA string referencing a <code>crate::config::UserProgram</code>, …\nThe internal representation of a <code>crate::config::UserInput</code>\nThe internal representation of a <code>crate::config::UserProgram</code>\nLocal execution.\nInternally used metadata for inputs/programs\nDescribes a matching between an algorithm and an input.\nThe input for a <code>Run</code>, exactly as will be passed to the …\nSlurm execution.\nAn executable afterscript to run on the output of this …\nWhen the afterscript has been run, it’s stdout is stored …\nCommand line arguments for this binary execution.\nCommand line arguments to be passed to the executable\nThe command line arguments to be passed to all executions …\nThe executable of this program (absolute path to it)\nA mapping of job array task id indices to run ids.\nThe time of creation of the experiment.\nEnvironment of the experiment\nThe path to the stderr output.\nPath to the experiment lockfile.\nA file whose contents to be passed into the program’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe input this has been generated from.\nGet the label by name.\nGet (a clone of) the <code>InternalProgram</code> used for a given <code>Run</code>.\nWhich input this was generated from.\nThe group this item belongs to.\nThe group this run belongs to.\nThe input groups present in this experiment.\nThe directory in which the contents of this experiment …\nA file to pass the contents into <code>stdin</code>\nThe path to the file to pass into stdin\nDealing with <code>crate::config::UserInput</code>s and <code>InternalInput</code>s\nThe inputs for the experiment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether it was fetched.\nLabels used in this experiment.\nThe limits to be applied on executions of this program\nResource limits applied to this run\nAdditional data for this input\nThe path to a folder where the metrics output will be …\nThe path to the metrics file.\nThe name given to this program by the user.\nThis program runs on the output of our program, a …\nHow many threads to use for local execution\nThe path to a folder where the experiment output will be …\nThe path to the stdout output.\nEdge to the parent run.\nThe unique name of the program to run.\nGet (a clone of) the <code>InternalProgram</code> used for a given <code>Run</code>.\nDealing with <code>crate::config::UserProgram</code>s and …\nThe programs for the experiment.\nIf this job has been rerun, a reference to the new one.\nGlobal resource limits that will apply to <em>newly created </em>…\nThe pairings of program-input for this experiment.\nSave the experiment\nSave the experiment to a file with its timestamp.\nThe ID of this experiment.\nIf running on a SLURM cluster, the job configurations.\nGet the slurm stderr file path for a given run.\nSlurm job id, if ran on slurm\nGet the slurm stdout file path for a given run.\nThe working directory of this run.\nWhat to call as a std::process::Command to get the wrapper …\nConvert a <code>UserInput</code> to a list of <code>InternalInput</code>s, expanding …\nConvert a <code>UserProgram</code> to a list of <code>InternalProgram</code>s, …\nThis defines all interactions of gourd with the filesystem.\nInteractor with the actual physical file system.\nGiven a path try to canonicalize it.\nIf true this will not write nor store any state to the …\nReturns the argument unchanged.\nCreate a new template repository.\nCalls <code>U::from(self)</code>.\nRead a file into raw bytes.\nRead a file into a utf8 string.\nMake a file possible to execute.\nTruncates the file and then runs …\nTruncates the folder and then runs …\nTry to deserialize a toml file into a struture <code>T</code>.\nTry to serialize a struct <code>T</code> into a toml file.\nWrite all files in a .tar directory structure at the …\nWrite all bytes to a file.\nWrite a String to a file.\nThe measurement has been finished.\nThis structure contains the measurements for one run of …\nThe metrics of running a program.\nThe metrics have not been calculated yet.\nResource usage statistics for a process.\nThe exit code of the invoked program.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntegral unshared data size.\nBlock input operations.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIntegral unshared stack size.\nIntegral shared memory size.\nPage faults (hard page faults).\nMaximum resident set size.\nPage reclaims (soft page faults).\nIPC messages received.\nIPC messages sent.\nInvoluntary context switches.\nSignals received.\nSwaps.\nVoluntary context switches.\nBlock output operations.\nThe rusage of the invoked program.\nSystem CPU time used.\nUser CPU time used.\nInterval of wall time.\nDownloads a file given a url.\nGets the files given the file paths.\nRuns a shell script.")